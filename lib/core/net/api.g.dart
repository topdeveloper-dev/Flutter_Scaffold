// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'api.dart';

// **************************************************************************
// RetrofitGenerator
// **************************************************************************

class _APIClient implements APIClient {
  _APIClient(this._dio, {this.baseUrl}) {
    ArgumentError.checkNotNull(_dio, '_dio');
    baseUrl ??= 'https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v18/';
  }

  final Dio _dio;

  String baseUrl;

  @override
  Future<HttpResponse<List<Autogenerated>>> getTags() async {
    const _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _data = <String, dynamic>{};
    try{
      final _result = await _dio.request<List<dynamic>>('/tags',
          queryParameters: queryParameters,
          options: RequestOptions(
              method: 'GET',
              headers: <String, dynamic>{},
              extra: _extra,
              baseUrl: baseUrl),
          data: _data);
      var value = _result.data
          .map((dynamic i) => Autogenerated.fromJson(i as Map<String, dynamic>))
          .toList();
      final httpResponse = HttpResponse(value, _result);
      return httpResponse;
    }on DioError catch (e){
      if (e.response != null) {
        print("=====DioError 1======");
        print(e.response.statusCode);
        print(e.response.data);
        print(e.response.headers);
        print(e.response.request);
        final httpResponse = HttpResponse(null, e.response);
        return httpResponse;
      } else {
        // Something happened in setting up or sending the request that triggered an Error
        print("=====DioError 2======");

        print(e.request);
        print(e.message);
      }

    }
  }

  @override
  Future<HttpResponse<dynamic>> headRquest3() async {
    const _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _data = <String, dynamic>{};
    final _result = await _dio.request('/',
        queryParameters: queryParameters,
        options: RequestOptions(
            method: 'HEAD',
            headers: <String, dynamic>{},
            extra: _extra,
            baseUrl: baseUrl),
        data: _data);
    final value = _result.data;
    final httpResponse = HttpResponse(value, _result);
    return httpResponse;
  }
}
